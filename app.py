import streamlit as st
import pdfplumber
import re
from sklearn.pipeline import make_pipeline
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression

# --- CONFIGURACI√ìN DE LA P√ÅGINA ---
st.set_page_config(
    page_title="Clasificador de Curr√≠culos - Centro de Salud",
    page_icon="ü©∫",
    layout="centered"
)

# --- LOGO Y ENCABEZADO ---
st.image("logo.png", width=150)
st.markdown("<h1 style='text-align: center; color: #2c3e50;'>Clasificador de Curr√≠culos</h1>", unsafe_allow_html=True)
st.markdown("<h4 style='text-align: center; color: gray;'>Centro de Salud ‚Äì Selecci√≥n por Especialidad</h4>", unsafe_allow_html=True)
st.write("---")

# --- FUNCION DE PREPROCESAMIENTO ---
def limpiar_texto(texto):
    texto = texto.lower()  # pasar a min√∫sculas
    texto = re.sub(r'\n', ' ', texto)  # quitar saltos de l√≠nea
    texto = re.sub(r'[^\w\s]', ' ', texto)  # eliminar caracteres especiales
    texto = re.sub(r'\s+', ' ', texto)  # eliminar espacios extras
    return texto.strip()

# --- DATOS DE ENTRENAMIENTO MEJORADOS ---
textos = [
    # Obstetricia
    "control prenatal atenci√≥n parto planificaci√≥n familiar salud materna ginecolog√≠a obst√©trica embarazo parto natural ecograf√≠as atenci√≥n gestantes",
    "parto humanizado monitoreo fetal cuidados pre y postnatales salud materna programas comunitarios embarazo seguro lactancia materna",
    
    # Odontolog√≠a
    "salud bucal limpieza dental extracciones caries ortodoncia odontopediatr√≠a radiograf√≠as dentales atenci√≥n en consultorio tratamiento dental",
    "prevenci√≥n caries tratamiento conducto pr√≥tesis dentales cirug√≠a oral odontolog√≠a est√©tica blanqueamiento limpieza profunda",
    
    # Laboratorio
    "an√°lisis cl√≠nicos muestras sangre hemograma pruebas serol√≥gicas bioqu√≠mica cl√≠nica procesamiento muestras microscopio diagn√≥stico ex√°menes m√©dicos",
    "laboratorio cl√≠nico control calidad toma de muestras an√°lisis microbiol√≥gico pruebas hematol√≥gicas qu√≠mica cl√≠nica",
    
    # Enfermer√≠a
    "cuidado pacientes administraci√≥n medicamentos monitoreo signos vitales primeros auxilios inyectables higiene post operatoria enfermer√≠a asistencial",
    "atenci√≥n directa pacientes cuidados intensivos administraci√≥n de medicamentos control signos vitales asistencia post operatoria",
    
    # Doctor / M√©dico
    "diagn√≥stico m√©dico consulta externa recetas emergencias atenci√≥n primaria historial cl√≠nico medicina general prescripci√≥n tratamientos urgencias",
    "consulta m√©dica evaluaci√≥n cl√≠nica tratamiento diagn√≥stico especialista historia cl√≠nica atenci√≥n hospitalaria",
    
    # Administraci√≥n y Estad√≠stica
    "gesti√≥n personal informes estad√≠sticos administraci√≥n recursos atenci√≥n p√∫blico procesamiento datos excel reportes m√©dicos archivo cl√≠nico sistema estad√≠stico",
    "administraci√≥n hospitalaria coordinaci√≥n personal manejo presupuestos informes estad√≠sticos an√°lisis datos bases de datos",
    
    # Limpieza
    "limpieza hospitalaria desinfecci√≥n ambientes recolecci√≥n residuos aseo consultorios manejo productos limpieza protocolos bioseguridad limpieza salas m√©dicas",
    "desinfecci√≥n √°reas hospitalarias aseo limpieza mantenimiento higiene control infecciones manejo qu√≠micos productos limpieza hospital"
]

areas = [
    "Obstetricia", "Obstetricia",
    "Odontolog√≠a", "Odontolog√≠a",
    "Laboratorio", "Laboratorio",
    "Enfermer√≠a", "Enfermer√≠a",
    "Doctor", "Doctor",
    "Administraci√≥n y Estad√≠stica", "Administraci√≥n y Estad√≠stica",
    "Limpieza", "Limpieza"
]

# --- ENTRENAMIENTO DEL MODELO ---
modelo = make_pipeline(
    TfidfVectorizer(ngram_range=(1,2), max_df=0.85, min_df=1),
    LogisticRegression(max_iter=1000, random_state=42)
)
modelo.fit(textos, areas)

# --- ESTILO PERSONALIZADO PARA LA CARGA DE ARCHIVO ---
st.markdown("""
    <style>
    .css-1y4p8pa, .css-1uixxvy, .e1b2p2ww0 {
        display: none !important;
    }
    </style>
""", unsafe_allow_html=True)

st.markdown("### üìÑ Arrastra y suelta tu archivo aqu√≠")
st.markdown("_L√≠mite: 200MB por archivo ‚Ä¢ Formato: PDF_")

# --- CARGA DE ARCHIVO ---
archivo = st.file_uploader("Selecciona un archivo", type="pdf", label_visibility="collapsed")

# --- PROCESAMIENTO Y CLASIFICACI√ìN ---
if archivo is not None:
    with pdfplumber.open(archivo) as pdf:
        texto = ""
        for pagina in pdf.pages:
            contenido = pagina.extract_text()
            if contenido:
                texto += contenido + "\n"

    texto = limpiar_texto(texto)

    if texto != "":
        if st.button("üîç Clasificar CV"):
            prob = modelo.predict_proba([texto])[0]
            pred = modelo.classes_[prob.argmax()]
            max_prob = prob.max()

            if max_prob >= 0.5:
                st.success(f"üóÇÔ∏è √Årea sugerida para el candidato: **{pred}** (Confianza: {max_prob*100:.2f}%)")
            else:
                st.warning("‚ö†Ô∏è No se pudo clasificar con suficiente confianza. Por favor revise el CV o mejore el modelo.")

            st.markdown("### üìä Detalle de Probabilidades")
            for label, p in zip(modelo.classes_, prob):
                st.write(f"- **{label}**: {p*100:.2f}%")
    else:
        st.warning("‚ö†Ô∏è No se pudo extraer texto del PDF. Aseg√∫rate de que el archivo no est√© escaneado como imagen.")
